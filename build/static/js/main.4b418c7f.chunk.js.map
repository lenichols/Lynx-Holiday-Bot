{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","assets/imgs/LynxLogo.svg"],"names":["App","props","state","inputRef","names","name","updateInput","bind","generate","save","React","createRef","this","current","focus","pair","csvContent","forEach","rowArray","i","len","length","replace","row","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","content","className","PopupboxManager","open","p","href","onClick","downloadCSV","console","log","sort","Math","random","pairs","pop","push","openGeneratePopupbox","openMessagePopupbox","event","setState","target","value","preventDefault","src","logo","ref","type","placeholder","onChange","id","map","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.4b418c7f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './assets/imgs/LynxLogo.svg';\nimport {\n  PopupboxManager,\n  PopupboxContainer\n} from \"react-popupbox\";\nimport \"react-popupbox/dist/react-popupbox.css\";\nimport './App.css';\n\nclass App extends React.Component<any, any> {\n\n  state: {\n    names: any[],\n    name: any[]\n  }\n\n  inputRef: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state={names:[], name: [] };\n    this.updateInput = this.updateInput.bind(this);\n    this.generate = this.generate.bind(this);\n    this.save = this.save.bind(this);\n    this.inputRef = React.createRef();\n  }\n\n  componentDidMount(){\n    this.inputRef.current.focus();\n  }\n\n  downloadCSV(pair: any) {\n    const arrayContent = pair;\n    let csvContent = \"data:text/csv;charset=utf-8,\";\n    arrayContent.forEach(function (rowArray) {\n      for (let i = 0, len = rowArray.length; i < len; i++) {\n        if (typeof (rowArray[i]) == 'string')\n          rowArray[i] = rowArray[i].replace(/<(?:.|\\n)*?>/gm, '');\n        rowArray[i] = rowArray[i].replace(/,/g, '');\n      }\n      let row = rowArray.join(\",\");\n      csvContent += row + \"\\r\\n\"; // add carriage return\n    });\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"fileName.csv\");\n    document.body.appendChild(link);\n    link.click();\n  }\n\n  openMessagePopupbox() {\n    const content = (\n      <div>\n        <p className=\"quotes\">In order to generate a randomized paired list,</p>\n        <p className=\"quotes\"> you need to have an even number of persons</p>  \n        <p className=\"quotes\"> and have at least two names added.</p>       \n        <span className=\"quotes-from\">― Santa Bot</span>\n      </div>\n    )\n    PopupboxManager.open({ content })\n  }\n\n\n  openGeneratePopupbox(p) {\n    const content = (\n      <div>\n        <p className=\"quotes\">Your Secret Santa list has been generated!<br/>Choose an option below.</p>\n\n        <p className=\"downloadLink\">Email</p> \n        <p className=\"blueLink\">or</p> \n        <p className=\"downloadLink\"><a href=\"javascript:void(0)\" onClick={() => this.downloadCSV(p)}>Download</a></p>       \n        {/* <span className=\"quotes-from\">― Santa Bot</span> */}\n      </div>\n    )\n    PopupboxManager.open({ content })\n  }\n\n  generate() {\n\n    if ((this.state.names.length >= 3) && (this.state.names.length % 2 == 0)) {\n      console.log(\"List is even with total names = \", this.state.names.length);\n\n      this.state.names.sort(() => 0.5 - Math.random());\n\n      const pairs: any[] = [];\n\n      // as we need at least players to form a pair\n      while (this.state.names.length >= 2) { \n        const pair = [this.state.names.pop(), this.state.names.pop()];\n\n        // Current pair\n        //console.log('Single pair', pair);\n\n        // Save current pair\n        pairs.push(pair);\n      }\n\n      // All pairs\n      console.log('All pairs', pairs);\n      this.openGeneratePopupbox(pairs);\n\n    } else {\n      //alert(\"your array is not even, add one more name\");\n      this.openMessagePopupbox()\n    }\n\n  }\n\n  updateInput(event: any){\n    this.setState({name : event.target.value})\n  }\n  \n  save(event: any) {\n    event.preventDefault();\n    this.state.names.push(this.state.name);\n    this.setState({name: ''});\n    this.inputRef.current.focus();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" />\n          <p className=\"Holiday-text\">Holiday Bot</p>\n          <p>\n            A fun Secret Santa Generator for Teams across McKesson.\n          </p>\n          <h3>Get Started</h3>\n          <ul className=\"App-normal\">\n            <li>1. Fill in the names of each individuals in your team</li>\n            <li>2. Press <code>Generate</code> to pair teammembers</li>\n            <li>3. Press <code>Print</code> or <code>Email</code> to finalize</li>\n          </ul>\n          <hr/>\n          <p className=\"App-note\">Your generated list will not be saved so be sure to print or email the list to yourself and your teammembers.</p>\n          <section className=\"App-sectionone\">\n            <div className=\"App-formArea\">\n            <form>\n              <input ref={this.inputRef} type=\"text\" name=\"name\" className=\"App-res\" placeholder=\"Enter team members name\" onChange={this.updateInput} value={this.state.name} />\n              <button onClick={this.save.bind(this)} type=\"submit\">Add</button>\n            </form>\n            </div>\n          </section>\n          <div>\n              <ul id=\"App-nameslist\">\n              {this.state.names.map(function(name, i) {\n                      return <li key={i}>{name}</li>\n              })}\n              </ul>\n            </div>\n            <div>\n            <button id=\"App-generateButton\" onClick={this.generate.bind(this)} type=\"button\">Generate</button>\n            <PopupboxContainer />\n            </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/LynxLogo.d23c8b0e.svg\";"],"sourceRoot":""}